{"version":3,"sources":["components/Resultado.jsx","components/NumberInput.jsx","helpers/operaciones.js","components/Calculadora.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Resultado","operacion","calculo","NumberInput","useState","numero1","numero2","numeros","setNumeros","handleChange","e","target","name","parseFloat","value","suma","resta","division","multiplicacion","operaciones","className","onChange","type","Calculadora","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.147795c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Resultado = ({ operacion, calculo }) => {\r\n  return (\r\n    <div>\r\n      <br />\r\n      <span>\r\n        {operacion}: {calculo}{\" \"}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nResultado.propTypes = {\r\n  operacion: PropTypes.string,\r\n  calculo: PropTypes.number,\r\n};\r\n\r\nexport default Resultado;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Resultado from \"./Resultado\";\r\nimport { operaciones } from \"../helpers/operaciones\";\r\n\r\nconst NumberInput = () => {\r\n  const [numeros, setNumeros] = useState({\r\n    numero1: 10,\r\n    numero2: 5,\r\n  });\r\n\r\n  const {\r\n    handleChange,\r\n    suma,\r\n    resta,\r\n    division,\r\n    multiplicacion,\r\n    numero1,\r\n    numero2,\r\n  } = operaciones(numeros, setNumeros);\r\n\r\n  return (\r\n    <>\r\n      <label className=\"mx-2\">\r\n        Numero 1:{\" \"}\r\n        <input\r\n          name=\"numero1\"\r\n          value={numero1}\r\n          onChange={handleChange}\r\n          type=\"number\"\r\n        />\r\n      </label>\r\n      <label className=\"mx-2\">\r\n        Numero 2:{\" \"}\r\n        <input\r\n          name=\"numero2\"\r\n          value={numero2}\r\n          onChange={handleChange}\r\n          type=\"number\"\r\n        />\r\n      </label>\r\n\r\n      <Resultado operacion=\"Suma\" calculo={suma()} />\r\n      <Resultado operacion=\"Resta\" calculo={resta()} />\r\n      <Resultado operacion=\"Multiplicacion\" calculo={division()} />\r\n      <Resultado operacion=\"Division\" calculo={multiplicacion()} />\r\n    </>\r\n  );\r\n};\r\n\r\nNumberInput.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nexport default NumberInput;\r\n","export const operaciones = (numeros, setNumeros) => {\r\n  const { numero1, numero2 } = numeros;\r\n  const handleChange = (e) => {\r\n    setNumeros({\r\n      ...numeros,\r\n      [e.target.name]: parseFloat(e.target.value),\r\n    });\r\n  };\r\n\r\n  const suma = () => numero1 + numero2;\r\n\r\n  const resta = () => numero1 - numero2;\r\n\r\n  const division = () => numero1 / numero2;\r\n\r\n  const multiplicacion = () => numero1 * numero2;\r\n\r\n  return {\r\n    handleChange,\r\n    suma,\r\n    resta,\r\n    division,\r\n    multiplicacion,\r\n    numero1,\r\n    numero2,\r\n  };\r\n};\r\n","import { useState } from \"react\";\r\nimport NumberInput from \"./NumberInput\";\r\n\r\nconst Calculadora = () => {\r\n  return (\r\n    <div>\r\n      <NumberInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculadora;\r\n","import React from 'react'\nimport Calculadora from './components/Calculadora'\n\nconst App = () => {\n  return <div className=\"container text-center\">\n      <h1> Calculadora - PWA </h1>\n      <hr />\n\n      <Calculadora />\n      \n    </div>\n  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}